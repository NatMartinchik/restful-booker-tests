{
	"info": {
		"_postman_id": "e4d367cd-98e3-425f-b30d-af87d2f46378",
		"name": "Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth & save token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code = 200', function () { pm.response.to.have.status(200); });\r",
							"\r",
							"pm.test(\"Token is received\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"\r",
							"pm.test(\"Token is set as environmental variable\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.environment.set(\"token\", data.token);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"{{username}}\",\n    \"password\" : \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{domain}}/auth",
					"host": [
						"{{domain}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code = 200', function () { pm.response.to.have.status(200); });\r",
							"\r",
							"pm.test(\"Booking is created\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Environmental variables bookingid, firstname, lastname are set\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.environment.set(\"bookingid\", data.bookingid);\r",
							"    pm.environment.set('firstname', data.booking.firstname);\r",
							"    pm.environment.set('lastname', data.booking.lastname);\r",
							"});  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"May\",\r\n    \"lastname\" : \"Jailer\",\r\n    \"totalprice\" : 123,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2027-03-15\",\r\n        \"checkout\" : \"2027-03-25\"\r\n    },\r\n    \"additionalneeds\" : \"Early checkin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/booking",
					"host": [
						"{{domain}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get specific booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code = 200', function () { pm.response.to.have.status(200); });\r",
							"\r",
							"pm.test(\"We got the created booking.\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('firstname');\r",
							"});\r",
							"pm.test(\"We got the created booking.\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('lastname');\r",
							"});\r",
							"\r",
							"pm.test(\"Response properties match environment variables\", function () {\r",
							"  pm.expect(pm.response.json().firstname).to.eql(pm.environment.get(\"firstname\"));\r",
							"  pm.expect(pm.response.json().lastname).to.eql(pm.environment.get(\"lastname\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/booking/{{bookingid}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code = 200', function () { pm.response.to.have.status(200); });\r",
							"\r",
							"pm.test(\"Booking is updated, name and price are changed\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response properties don't match environment variables\", function () {\r",
							"  pm.expect(pm.response.json().firstname).to.not.eql(pm.environment.get(\"firstname\"));\r",
							"  pm.expect(pm.response.json().lastname).to.not.eql(pm.environment.get(\"lastname\"));\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Environmental variables firstname, lastname are updated\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.environment.set('firstname', data.firstname);\r",
							"    pm.environment.set('lastname', data.lastname);\r",
							"});    "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorisation",
						"value": "YWRtaW46cGFzc3dvcmQxMjM=]",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Lizzy\",\r\n    \"lastname\" : \"Grant\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/booking/{{bookingid}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Full update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code = 200', function () { pm.response.to.have.status(200); });\r",
							"\r",
							"pm.test(\"Booking is fully updated\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response properties don't match environment variables\", function () {\r",
							"  pm.expect(pm.response.json().firstname).to.not.eql(pm.environment.get(\"firstname\"));\r",
							"  pm.expect(pm.response.json().lastname).to.not.eql(pm.environment.get(\"lastname\"));\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Environmental variables firstname, lastname are updated\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.environment.set('firstname', data.firstname);\r",
							"    pm.environment.set('lastname', data.lastname);\r",
							"});    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					},
					{
						"key": "Authorisation",
						"value": "YWRtaW46cGFzc3dvcmQxMjM=]",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Lana\",\r\n    \"lastname\" : \"Del Rey\",\r\n    \"totalprice\" : 123,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2027-03-15\",\r\n        \"checkout\" : \"2027-03-25\"\r\n    },\r\n    \"additionalneeds\" : \"Early checkin\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/booking/{{bookingid}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code = 201', function () { pm.response.to.have.status(201); });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					},
					{
						"key": "Authorisation",
						"value": "YWRtaW46cGFzc3dvcmQxMjM=]",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{domain}}/booking/{{bookingid}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking Ids",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const echoPostRequest = {\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"          \"content-type\": \"application/json\"},\r",
							"    body: {\r",
							"      mode: 'raw',\r",
							"      raw: JSON.stringify({ \r",
							"          \"username\": \"admin\",\r",
							"          \"password\": \"password123\"\r",
							"      })\r",
							"    }\r",
							"  };\r",
							"  \r",
							"  pm.sendRequest(echoPostRequest, function(err, res) {\r",
							"      if(err) {\r",
							"          console.log(err ? err : res.json())\r",
							"      }\r",
							"      else {\r",
							"          pm.environment.set(\"token\", res.json().token)\r",
							"      }\r",
							"  })"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code = 200', function () { pm.response.to.have.status(200); });\r",
							"\r",
							"pm.test(\"Response Content-Type should be json\", function () {\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"pm.test(\"Response should contain at least one bookingid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].bookingid).to.not.be.null;\r",
							"    pm.expect(jsonData[0].bookingid).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test('Created test booking is deleted', function (){\r",
							"    pm.expect(pm.response.json()).not.to.include('bookingid');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/booking",
					"host": [
						"{{domain}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		}
	]
}